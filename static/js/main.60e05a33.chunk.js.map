{"version":3,"sources":["components/CityMeteo.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","process","CityMeteo","useState","cityInput","setCityInput","cityDesc","setCityDesc","cityTemp","setCityTemp","weatherDesc","setWeatherDesc","cityWind","setCityWind","cityHumidity","setCityHumidity","useEffect","axios","get","then","res","console","log","data","main","temp","weather","description","humidity","wind","speed","catch","error","className","onSubmit","e","preventDefault","name","type","value","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPAMMA,EAASC,mCAsGAC,EApGG,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACfC,EADe,KACJC,EADI,OAEUF,mBAAS,IAFnB,mBAEfG,EAFe,KAELC,EAFK,OAGUJ,mBAAS,IAHnB,mBAGfK,EAHe,KAGLC,EAHK,OAIgBN,mBAAS,IAJzB,mBAIfO,EAJe,KAIFC,EAJE,OAKUR,mBAAS,IALnB,mBAKfS,EALe,KAKLC,EALK,OAMkBV,mBAAS,IAN3B,mBAMfW,EANe,KAMDC,EANC,KAQtBC,qBAAU,WACRC,IACGC,IADH,wEAEqElB,EAFrE,0BAIGmB,MAAK,SAAAC,GACJC,QAAQC,IAAI,gBAAiBF,EAAIG,MACjCF,QAAQC,IAAI,qBAAsBF,EAAIG,KAAKC,KAAKC,MAChDJ,QAAQC,IACN,oCACAF,EAAIG,KAAKG,QAAQ,GAAGC,aAEtBN,QAAQC,IAAI,8BAA+BF,EAAIG,KAAKC,KAAKI,UACzDnB,EAAYW,EAAIG,KAAKC,KAAKC,MAC1BlB,EAAYa,EAAIG,MAChBZ,EAAeS,EAAIG,KAAKG,QAAQ,GAAGC,aACnCd,EAAYO,EAAIG,KAAKM,KAAKC,OAC1Bf,EAAgBK,EAAIG,KAAKC,KAAKI,aAE/BG,OAAM,SAAAC,GACLX,QAAQC,IAAI,aAAcU,QAE7B,IAsBH,OACE,yBAAKC,UAAU,YACb,0CACA,0BAAMC,SAvBe,SAAAC,GACvBA,EAAEC,iBAEFnB,IACGC,IADH,4DAEyDd,EAFzD,kBAE4EJ,EAF5E,0BAIGmB,MAAK,SAAAC,GACJC,QAAQC,IAAI,kBAAmBF,EAAIG,KAAKc,MACxChB,QAAQC,IAAI,qBAAsBF,EAAIG,KAAKC,KAAKC,MAChDhB,EAAYW,EAAIG,KAAKC,KAAKC,MAC1BlB,EAAYa,EAAIG,MAChBZ,EAAeS,EAAIG,KAAKG,QAAQ,GAAGC,aACnCd,EAAYO,EAAIG,KAAKM,KAAKC,OAC1Bf,EAAgBK,EAAIG,KAAKC,KAAKI,aAE/BG,OAAM,SAAAC,GACLX,QAAQC,IAAI,aAAcU,QAO1B,2BACEM,KAAK,OACLC,MAAOnC,EACPoC,SAAU,SAAAL,GACR9B,EAAa8B,EAAEM,OAAOF,UAG1B,4BAAQD,KAAK,UAAb,YAGF,qCAAWhC,EAAS+B,MAEpB,yBAAKJ,UAAU,aACb,6BACE,8BACG,IACD,kBAAC,IAAD,OAEF,qCAAOzB,EAAP,WAEF,6BACE,8BACE,kBAAC,IAAD,OAEF,2BAAIE,IAEN,6BACE,8BACG,IACD,kBAAC,IAAD,OAEF,2BAAIE,EAAJ,QAEF,6BACE,8BACE,kBAAC,IAAD,OAEF,2BAAIE,EAAJ,UC1FK4B,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,Q,MCMcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAM0B,c","file":"static/js/main.60e05a33.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FaTemperatureLow } from \"react-icons/fa\";\nimport { WiDayCloudy } from \"react-icons/wi\";\nimport { WiStrongWind } from \"react-icons/wi\";\nimport { WiHumidity } from \"react-icons/wi\";\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nconst CityMeteo = () => {\n  const [cityInput, setCityInput] = useState(\"\");\n  const [cityDesc, setCityDesc] = useState(\"\");\n  const [cityTemp, setCityTemp] = useState(\"\");\n  const [weatherDesc, setWeatherDesc] = useState(\"\");\n  const [cityWind, setCityWind] = useState(\"\");\n  const [cityHumidity, setCityHumidity] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=Paris&appid=${apiKey}&units=metric&lang=fr`\n      )\n      .then(res => {\n        console.log(\"res.data :>> \", res.data);\n        console.log(\"res.date.main :>> \", res.data.main.temp);\n        console.log(\n          \"res.data.weather.description :>> \",\n          res.data.weather[0].description\n        );\n        console.log(\"res.data.main.humidity :>> \", res.data.main.humidity);\n        setCityTemp(res.data.main.temp);\n        setCityDesc(res.data);\n        setWeatherDesc(res.data.weather[0].description);\n        setCityWind(res.data.wind.speed);\n        setCityHumidity(res.data.main.humidity);\n      })\n      .catch(error => {\n        console.log(\"error :>> \", error);\n      });\n  }, []);\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityInput}&appid=${apiKey}&units=metric&lang=fr`\n      )\n      .then(res => {\n        console.log(\"res.data 2 :>> \", res.data.name);\n        console.log(\"res.data.main :>> \", res.data.main.temp);\n        setCityTemp(res.data.main.temp);\n        setCityDesc(res.data);\n        setWeatherDesc(res.data.weather[0].description);\n        setCityWind(res.data.wind.speed);\n        setCityHumidity(res.data.main.humidity);\n      })\n      .catch(error => {\n        console.log(\"error :>> \", error);\n      });\n  };\n  return (\n    <div className=\"main-div\">\n      <h1>City meteo</h1>\n      <form onSubmit={handleSubmitForm}>\n        <input\n          type=\"text\"\n          value={cityInput}\n          onChange={e => {\n            setCityInput(e.target.value);\n          }}\n        />\n        <button type=\"submit\">Valider</button>\n      </form>\n\n      <h4>Ville {cityDesc.name}</h4>\n\n      <div className=\"container\">\n        <div>\n          <span>\n            {\" \"}\n            <FaTemperatureLow />\n          </span>\n          <p>{`${cityTemp}Â°c`}</p>\n        </div>\n        <div>\n          <span>\n            <WiDayCloudy />\n          </span>\n          <p>{weatherDesc}</p>\n        </div>\n        <div>\n          <span>\n            {\" \"}\n            <WiStrongWind />\n          </span>\n          <p>{cityWind} km</p>\n        </div>\n        <div>\n          <span>\n            <WiHumidity />\n          </span>\n          <p>{cityHumidity} %</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CityMeteo;\n","import React from \"react\";\nimport CityMeteo from \"./components/CityMeteo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CityMeteo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./sass/style.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}